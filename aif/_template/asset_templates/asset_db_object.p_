"""This module contains the asset to create the database object <ASSET_NAME> in <SCHEMA_NAME>.

This module defines a Dagster asset that creates a database object (table, view, function, etc.)
by executing a DDL statement from a SQL file. The asset handles the creation of <ASSET_NAME>
in the <SCHEMA_NAME> schema.
"""

import dagster as dg

from aif.common.dagster.asset_db import asset_call_db_method
from aif.common.dagster.util import run_jobs_for_assets
from aif.<PRJ_NAME>.<DWH_NAME>.<SCHEMA_NAME> import DWH_NAME, SCHEMA_NAME


CONFIG_FILES = [
    "aif/common/aif/resources/config/base.yaml",
    "aif/<PRJ_NAME>/resources/config/{ENV}/dwh.yaml",
]


@dg.asset(
    key_prefix=[DWH_NAME, SCHEMA_NAME],
    name="<ASSET_NAME>",
    description="<COMMENT>",
    group_name=f"{DWH_NAME}_{SCHEMA_NAME}",
    deps=[dg.SourceAsset(key=dg.AssetKey([DWH_NAME, SCHEMA_NAME, "SCHEMA"]))],
)
def asset_<asset_name_lowercase>(context: dg.AssetExecutionContext) -> dg.MaterializeResult:
    """Create the <ASSET_NAME> database object in the <SCHEMA_NAME> schema.

    This asset creates a database object (<ASSET_TYPE>: table, view, function, etc.) by executing
    a DDL statement from a SQL file. The object will be created in the <SCHEMA_NAME> schema.

    Parameters:
        context: The Dagster asset execution context, which contains metadata about the asset.

    Returns:
        dg.MaterializeResult: A Dagster materialization result containing metadata about the operation.

    Raises:
        Exception: Any exception that might occur during database operations.
    """
    description = context.assets_def.descriptions_by_key[context.asset_key]
    return asset_call_db_method(
        config_files=CONFIG_FILES,
        db_name=DWH_NAME,
        method_name="execute_statement_from_file",
        filename="<DDL_FILENAME>",
        parameters={"COMMENT": description},
    )


if __name__ == "__main__":
    run_jobs_for_assets([asset_<asset_name_lowercase>])
